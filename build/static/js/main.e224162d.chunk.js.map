{"version":3,"sources":["components/Banner/index.js","components/Clickable/index.js","App.js","serviceWorker.js","index.js"],"names":["Banner","props","react_default","a","createElement","className","score","topScore","Clickable","onClick","test","name","alt","src","image","App","state","cards","clicked","randomize","temporaryValue","randomIndex","array","_this","currentIndex","length","Math","floor","random","setState","handleClick","indexOf","console","log","newScore","newArr","push","_this2","this","components_Banner","map","card","components_Clickable","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gmFAuBeA,MApBf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,2BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,UAAiCJ,EAAMK,MAAvC,gBAA2DL,EAAMM,YAIvEL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,6FCDGI,MAZf,SAAoBP,GAEhB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBI,QAAS,kBAAMR,EAAMS,KAAKT,EAAMU,QACzDT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMU,KAAME,IAAKZ,EAAMa,WCgElCC,6MAjEbC,MAAQ,CACNV,MAAO,EACPC,SAAU,EACVU,MAAOA,EACPC,QAAS,MAIXC,UAAY,WAKV,IAJA,IACiCC,EAAgBC,EAD7CC,EAAQC,EAAKP,MAAMC,MACnBO,EAAeF,EAAMG,OAGlB,IAAMD,GAGbH,EAAcK,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCJ,EAAiBE,EAHjBE,GAAgB,GAIhBF,EAAME,GAAgBF,EAAMD,GAC5BC,EAAMD,GAAeD,EAErBG,EAAKM,SAAS,CAACZ,MAAOK,OAIxBQ,YAAc,SAACnB,GAEb,GAAIY,EAAKP,MAAME,QAAQa,QAAQpB,IAAS,EACtCqB,QAAQC,IAAI,4BACZV,EAAKM,SAAS,CAACvB,MAAO,EAAGY,QAAS,SAC9B,CACJ,IAAIgB,EAAWX,EAAKP,MAAMV,MAAQ,EAC9B6B,EAASZ,EAAKP,MAAME,QACxBiB,EAAOC,KAAKzB,GACRuB,EAAWX,EAAKP,MAAMT,SACxBgB,EAAKM,SAAS,CAACvB,MAAO4B,EAAU3B,SAAU2B,EAAUhB,QAASiB,IAE7DZ,EAAKM,SAAS,CAACvB,MAAO4B,EAAUhB,QAASiB,IAK7CZ,EAAKJ,qFAIE,IAAAkB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,CAAQjC,MAAOgC,KAAKtB,MAAMV,MAAOC,SAAU+B,KAAKtB,MAAMT,WAEtDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdiC,KAAKtB,MAAMC,MAAMuB,IAAI,SAAAC,GACtB,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,CAAWC,IAAKF,EAAKG,GAAIjC,KAAM8B,EAAK9B,KAAMG,MAAO2B,EAAK3B,MAAOJ,KAAM2B,EAAKP,yBAzDrEe,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e224162d.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction Banner (props) {\n    return (\n        <div>\n          <nav className=\"navbar fixed-top\">\n            <ul>\n                <li className=\"navbar-brand nav-item\">Clicky Game!</li>  \n                <li className=\"nav-item\">Click an image to begin</li>\n                <li className=\"nav-item\">Score: {props.score} | TopScore: {props.topScore}</li>\n            </ul>\n          </nav>\n\n          <header className=\"jumbotron\">\n            <h1>Clicky Game!</h1>\n            <h2>Click on an image to earn points! Don't click on the same image twice!</h2>\n          </header>\n\n        </div>\n    );\n}\n\nexport default Banner;\n\n","import React from 'react';\nimport \"./style.css\";\n\nfunction Clickable (props) {\n    \n    return (\n        <div className=\"card\">\n            <a className=\"img-container\" onClick={() => props.test(props.name)}>\n                <img alt={props.name} src={props.image} />\n            </a>\n        </div>\n    );\n\n}\n\nexport default Clickable;","import React, { Component } from 'react';\nimport './App.css';\nimport cards from \"./cards.json\";\nimport Banner from \"./components/Banner\";\nimport Clickable from \"./components/Clickable\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    cards: cards,\n    clicked: []\n  }\n\n  //Randomizes the state array of cards\n  randomize = () => {\n    var array = this.state.cards;\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n    this.setState({cards: array})\n  }\n\n  //hadles an click on the \n  handleClick = (name) => {\n    //if clicked already -> reset score/clicked value for all cards\n    if (this.state.clicked.indexOf(name) >= 0){\n      console.log(\"this was already clicked\");\n      this.setState({score: 0, clicked: []});\n    }else {\n      var newScore = this.state.score + 1;\n      var newArr = this.state.clicked;\n      newArr.push(name);\n      if (newScore > this.state.topScore) {\n        this.setState({score: newScore, topScore: newScore, clicked: newArr});\n      } else {\n        this.setState({score: newScore, clicked: newArr});\n      }\n    }\n\n    // console.log(\"Randomizing...\")\n    this.randomize();\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Banner score={this.state.score} topScore={this.state.topScore} />\n\n        <div className=\"container\">\n        {this.state.cards.map(card => {\n        return <Clickable key={card.id} name={card.name} image={card.image} test={this.handleClick} />\n        })}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}